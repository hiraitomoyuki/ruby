# さまざまな繰り返し処理

# timesメソッド
# 配列を使わずに、単純にn回処理を繰り返したい、という場合はIntegerクラスのtimesメソッドを使うと便利
sum = 0
# 処理を5回繰り返す。nには0, 1, 2, 3, 4が入る
5.times { |n| sum += n }
sum # => 10
# 不要であればブロック引数は省略してもok
sum = 0
# sumに1を加算する処理を5回繰り返す
5.times { sum += 1 }
sum # => 5

# uptoメソッドとdowntoメソッド
# nからmまで数値を1つずつ増やしながら何か処理したい場合は、Integerクラスのuptoメソッドを、数値を減らしていきたい場合はdowntoメソッドを使う
a = []
10.upto(14) { |n| a << n }
a # => [10, 11, 12, 13, 14]

a = []
14.downto(10) { |n| a << n }
a # => [14, 13, 12, 11, 10]

# stepメソッド
# 1, 3, 5, 7のようにnからmまで数値をx個ずつ増やしながら何か処理したい場合は、Numericクラスのstepメソッドを使う
開始値.step(上限値, 1度に増減する大きさ)

a = []
1.step(10, 2) { |n| a << n }
a # => [1, 3, 5, 7, 9]

# 10から1まで2ずつ値を減らす場合
a = []
10.step(1, -2) { |n| a << n }
a # => [10, 8, 6, 4, 2]