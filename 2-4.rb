# 数値

# 正の整数
10

# 小数
1.5

# 負の整数
-3

# 負の小数
-4.75

1_000_000_000 # => 1000000000

# 四則演算
10 + 20  # => 30
100 - 25 # => 75
12 * 5   # => 60
20 / 5   # => 4

n = 1
-n # => -1

# 整数同士の割り算は整数になる。小数点以下は切り捨て
# 0.5ではなく0になる
1/2 # => 0

# 必要なら.0をつける
1.0 / 2 # => 0.5

1 / 2.0 # => 0.5

n = 1
n.to_f     # => 1.0
n.to_f / 2 # => 0.5

8 % 3 # => 2

2 ** 3 # => 8

1 < 2  # => true
1 <= 2 # => true
1 > 2  # => false
1 >= 2 # => false
1 == 2 # => false
1 == 1 # => true
1 != 2 # => true

# 以下の計算は(2 * 3) + (4 * 5) - (6 / 2)と同じ
2 * 3 + 4 * 5 - 6 / 2 # => 23

# ()を使うと優先順位を変えることもできる
2 * (3 + 4) * (5 - 6) / 2 # => -7

=begin

優先順位高い
::
[]
+ (単項)
* / %
+ -
<< >>
&
| ^
> >= < <=
<=> == === != =~ !~
&&
||
.. ...
?: (条件演算子)
= (+=, -= ...)
not
and or
低い

=end

n = 1

# ++ は構文として無効
# n++

# nを1増やす (n = n + 1と同じ)
n += 1 # => 2

# nを1減らす (n = n - 1と同じ)
n -= 1 # => 1

n = 2

# nを3倍にする
n *= 3 # => 6

# nを2で割る
n /= 2 # => 3

# nを2乗する
n **= 2 # => 9

# 数値と文字列を+演算子で加算することはできない
1 + '10' # => TypeError: String can't be coerced into Integer

# 文字列は数値に変換する必要がある
# 整数に変換
1 + '10.to_i' # => 11

# 小数に変換
1 + '10.5'.to_f # => 11.5

number = 3

# 文字列に数値を+演算子で連結することはできない
'Number is ' + number # => TypeError: no implicit conversion of Integer init String

# 数値を文字列に変換する必要がある
'Number is' + number.to_s # => "Number is 3"

number = 3
"Number is #{number}" # => "Number is 3"

